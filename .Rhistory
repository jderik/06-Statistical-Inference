complete.cases(cr)
cr[complete.cases(cr)]
source("corr.r")
cr <- corr("specdata", 150)
head(cr)
summary(cr)
cr <- corr("specdata", 400)
head(cr)
cr
cr <- corr("specdata", 150)
source("corr.r")
cr <- corr("specdata", 150)
cr
head(cr)
summary(cr)
cr <- corr("specdata", 400)
head(cr)
summary(cr)
?round
cr <- corr("specdata", 5000)
head(cr)
summary(cr)
length(cr)
?summary
?append
?vector
source("corr.r")
source("corr.r")
source("corr.r")
cr <- corr("specdata", 150)
head(cr)
summary(cr)
cr <- corr("specdata")
summary(cr)
length(cr)
cr <- corr("specdata", 5000)
summary(cr)
length(cr)
source("submitscript1.r")
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
source("pollutantmean.r")
pollutantmean("specdata",nitrate,275)
dftest
id<-1:332
dftest<-read.csv("specdata/",SpecfFiles[275])
dftest<-read.csv("specdata/",SpecFiles[275])
dftest<-read.csv(paste("specdata/",SpecFiles[275],sep=""))
dfteset
dftest
x<-complete.cases(dftest[sulfate])
x<-complete.cases(dftest["sulfate"])
x
nrow(dftest[x,])
source("pollutantmean.r")
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "nitrate", 23)
pollutantmean("specdata", "nitrate", 275)
submit()
submit()
submit()
submit()
pollutantmean("specdata", "nitrate", NULL)
pollutantmean("specdata", NULL, NULL)
pollutantmean("specdata", "nitrate")
pollutantmean("specdata", "sulfate")
source("polluntantmean.r")
source("pollutantmean.r")
pollutantmean("specdata", "sulfate")
pollutantmean("specdata", "nitrate")
submit()
submit()
submit()
submit()
submit(manual=TRUE)
submit(manual=TRUE)
submit(manual=TRUE)
submit(manual=TRUE)
runif(2)
?<<-
?<<
library(datasets)
data(iris)
iris
?iris
names(iris)
mean(iris[,1,iris$species=="virginica"])
mean(iris[,1,iris$species="virginica"])
mean(iris[,1])
mean(iris[,1][iris$species="virginica"])
mean(iris[,1][iris$Species="virginica"])
mean(iris[,1][,iris$Species="virginica"])
mean(iris[,1][,iris$Species=="virginica"])
mean(iris[,1,iris$Species=="virginica"])
class(iris)
class(iris[,Species])
class(iris[,"Species"])
class(iris[1])
class(iris[,1])
class(iris[,2,3,4])
class(iris[])
iris[1,Species]
iris[1,5]
?lapply
lapply(iris, iris[,5])
lapply(iris, function(x) iris[,5])
list<-lapply(iris, function(x) iris[,5])
list
?tapply
tapply(iris, iris[,5], FUN=mean)
tapply(iris[,1], iris[,5], FUN=mean)
tapply(iris[,2], iris[,5], FUN=mean)
iris
write(iris, "sampledata")
write.csv(iris, "sampledata")
?apply
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
?colmeans
?colMeans
colMeans(iris, na.rm=TRUE, dims=1:4)
colMeans(iris, na.rm=TRUE)
colMeans(iris, na.rm=TRUE, dims=1)
apply(iris[, 1:4], 2, mean)
data(mtcars)
mtcats
mtcars
sapply(split(mtcars$mpg, mtcars$cyl), mean)
split(mtcars, mtcars$cyl)
list<-split(mtcars, mtcars$cyl)
list
dim(list)
class(list)
type(list)
names(list)
write.csv(list, "sample2.xls")
write.csv(list["4"], "sample2.xls")
write.csv(list["6"], "sample2.xls")
write.csv(list["8"], "sample2.xls")
split(mtcars$mpg, mtcars$cyl)
?split
sapply(split(mtcars$mpg, mtcars$cyl), average)
sapply(split(mtcars$mpg, mtcars$cyl), avg)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
debug(ls)
ls
ls
library(datasets)
data(mtcars)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
v<-
sapply(split(mtcars$mpg, mtcars$cyl), mean)
v
mtcars
v<-sapply(split(mtcars$hp, mtcars$cyl), mean)
v
v["8"]-v["4"]
library("swirl")
library(swirl)
install.packages("swirl")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
install_course_zip("C:/Users/dsilvaj/Downloads/swirl_courses-master.zip", multi=TRUE,            which_course="Getting and Cleaning Data")
library(swirl)
rm(list=ls())
swirl()
?read.csv
mydf<-read.csv(path2csv, stringsAsFactors=FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran<-tbl_df(mydf)
rm("mydf")
print(tbl_df)
tbl_df
cran
?se;ect
?select
select(cran, ip_id, package, country)
5:20
selct(cran, r_arch:country)
select(cran, r_arch:country)
select(cran, country:r_arch)
selct(cran, r_arch:country)
select(cran)
cran
select(cran, -time)
select(cran, -5:20)
select(cran, -X:size)
select(cran, -(X:size)
)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package=="swirl")
filter(cran, r_version=="3.1.1", country=="US")
?Comparison
filter(cran, r_version=="3.1.1", country=="IN")
filter(cran, r_version=="3.0.2", country=="IN")
filter(cran, r_version<="3.0.2", country=="IN")
filter(cran, country=="IN" | country=="US")
filter(cran, size>100500, r_os=="linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, size>100500, r_os=="linux-gnu")
filter(cran, !is.na(r_version))
cran2<-select(cran, size:ip_id)
arrange(Cran2, ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id
)
arrange(cran2, country, desc(r_version), desc(ip_id))
arrange(cran2, country, desc(r_version), (ip_id))
arrange(cran2, country, desc(r_version), ip_id)
cran3<-select(cran, ip_id,package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb=size_mb/2^10)
mutate(cran3, correct_size=size+1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran<-tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package<-group_by(cran, package)
by_package
summarize(by_package, mean(size))
submit()
setwd("Documents/Coursera/3")
submit()
getwd()
submit()
count=n()
n?
?
)
count=n(by_package)
?n
count=summarize(by_package,n())
unique=summarize(by_Package, n_distinct(ip_id))
unique=summarize(by_package, n_distinct(ip_id))
countries=summarize(by_package, n_distinct(country))
avg_bytes=summarize(by_package, mean(size))
submit()
pack_sum<-summarise(by_package, count, unique, countries)
pack_sum<-summarize(by_package, count, unique, countries)
pack_sum<-summarize(by_package, count, unique, countries,avg_bytes)
pack_sum<-summarize(by_package, summarize(by_package, n()))
pack_sum<-summaraize(by_Package)
pack_sum<-summarize(by_package)
submit()
summarize()
submit()
reset()
reset()
pack_sum<- c(count, unique, countries, avg_bytes)
submit()
pack_sum <- summarize(by_package,
count = ,
unique = ,
countries = ,
avg_bytes = )
reset()
pack_sum <- summarize(by_package,
count = n(),
unique = n_distinct(ip_id),
countries = n_distinct(country),
avg_bytes = mean(size))
submit()
reset()
submit()
reset()
reset()
pack_sum <- summarize(by_package,
count = n(),
unique = n_distinct(ip_id),
countries = n_distinct(country),
avg_bytes = mean(size))
submit()
summarize(by_package, avg_bytes = mean(size))
pack_sum <- summarize(by_package,
count = n(),
unique = n_distinct(ip_id),
countries = n_distinct(country),
avg_bytes = mean(size))
submit()
reset()
submit()
pack_sum <- summarize(by_package,
count = n(),
unique = n_distinct(ip_id),
countries = n_distinct(country),
avg_bytes = mean(size))
submit()
submit()
?n_distinct
pack_sum <- summarize(by_package,
count = n(),
unique = n_distinct(ip_id),
countries = n_distinct(country),
avg_bytes = mean(size))
submit()
submit()
pack_sum
swirl
library(swirl)
swirl()
quantile(pack_sum$count, probs = 0.99)
top_counts<-filter(pack_sum$count>679)
top_counts<-filter(pack_sum)
top_counts<-filter(pack_sum,count>679)
top_counts
View(top_counts)
top_counts_sorted<-arrange(pack_sum,count)
top_counts_sorted<-arrange(top_counts,desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs=0.99)
top_unique<-filter(pack_sum, unique>465)
View(top_unique)
top_unique_sorted<-filter(top_unique, desc(unique))
top_unique_sorted<-arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
cran %>% select(ip_id, country, package, size) %>% print
submit()
submit()
submit()
submit()
submit()
submit()
submit()
library(tidyr)
swirl
swirl()
library(swirl)
swirl()
students
?gather
gather(students, sex, count, -grade)
students2
res<-gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, c("sex","class"))
submit()
students3
?gather
submit()
submit()
submit()
submit()
submit()
?spread
submit()
submit()
submit()
extract_numeric("class5")
?mutate
submit()
submit()
submit()
submit()
res<-students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade)
res
mutate(res, class=extract_numeric(class))
submit()
reset()
submit()
students4
submit()
reset()
submit()
?unique
submit()
submit()
submit()
?unique
submit()
submit()
submit()
submit()
submit()
passed
failed
mutate(passed, status="passed")
?mutate
info()
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "Failed")
failed <- failed %>% mutate(status = "failed")
bind_rows(passed,failed)
sat
?gather
?separate
submit()
?gather
select(-contains("total"))
select(sat, -contains("total"))
res<-select(sat, -contains("total"))
res
res2<-gather(res, part_sex, count, -score_range)
res2
separate(res2,part_sex,c("part","sex"))
submit()
submit()
info()\
info()
bye()
version
getwd()
load("~/Coursera/3/03Quizzes/.RData")
getwd()
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?panel
??panel
library(datasets)
data(airquality)
str(airquality)
airquality = transform(airquality, Month = factor(Month))
str(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
str(airquality)
?geom
??geom
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
data(movies)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + geom_smooth()
?par
?plot
?cex
??cex
?rbinom
readRDS()
install.packages("knitr")
?read.csv
library(swirl)
rm(list=ls())
install_from_swirl("Statistical Inference")
getwd()
install_course_zip("~/Swirl/swirl_courses-master.zip", multi=TRUE, which_course="Statistical_Inference")
install_course_zip("Swirl/swirl_courses-master.zip", multi=TRUE, which_course="Statistical_Inference")
p <- c(.1, .2, .3, .4)
x <- 2 : 5
sum(x^2*p)-sum(x*p)^2
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
sum(x^2*p)-sum(x*p)^2
sum(x^2*p)
sum(temp["X",])
sum(x^2*p)*sum(x*p)^2
temp["Prob",]
sum(temp["X",] * temp["Prob",])
getwd()
setwd("C:/Users/dsilvaj/Documents/Coursera/6")
library("pander", lib.loc="C:/Program Files/R/R-3.1.2/library")
Pandoc.convert(f = "StatInfCourseProj.md", format = "pdf", option = "-S")
?pandoc
?render
render("StatInfCourseProj.Rmd", output_format = "pdf" )
library(knit)
install.packages(knit)
library("knitr", lib.loc="C:/Program Files/R/R-3.1.2/library")
install.packages(knitr)
install.packages("knitr")
library(knitr)
render("StatInfCourseProj.Rmd", output_format = "pdf" )
?render
render("StatInfCourseProj.Rmd", output_format = "pdf_document" )
library(rmarkdown)
render("StatInfCourseProj.Rmd", output_format = "pdf_document" )
render("StatInfCourseProj.md", output_format = "pdf_document" )
getwd()
